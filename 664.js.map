{"version":3,"file":"664.js","mappings":"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","sources":["webpack://@dev/web/./src/containers/Reader/styles.module.scss?4d5b","webpack://@dev/web/./src/containers/Reader/index.tsx","webpack://@dev/web/./src/containers/Reader/preprocess.ts","webpack://@dev/web/./src/containers/Reader/styles.module.scss"],"sourcesContent":["\n      import API from \"!../../../../../node_modules/.pnpm/style-loader@4.0.0_webpack@5.95.0/node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../../../../node_modules/.pnpm/style-loader@4.0.0_webpack@5.95.0/node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../../../../node_modules/.pnpm/style-loader@4.0.0_webpack@5.95.0/node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../../../../node_modules/.pnpm/style-loader@4.0.0_webpack@5.95.0/node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../../../../node_modules/.pnpm/style-loader@4.0.0_webpack@5.95.0/node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../../../../node_modules/.pnpm/style-loader@4.0.0_webpack@5.95.0/node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../../../../node_modules/.pnpm/css-loader@7.1.2_webpack@5.95.0/node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[0].use[1]!../../../../../node_modules/.pnpm/sass-loader@16.0.2_sass@1.79.4_webpack@5.95.0/node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./styles.module.scss\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\noptions.insert = insertFn.bind(null, \"head\");\noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../../../../../node_modules/.pnpm/css-loader@7.1.2_webpack@5.95.0/node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[0].use[1]!../../../../../node_modules/.pnpm/sass-loader@16.0.2_sass@1.79.4_webpack@5.95.0/node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./styles.module.scss\";\n       export default content && content.locals ? content.locals : undefined;\n","import React, { useState, useRef } from \"react\";\nimport preprocessImage from \"./preprocess\";\nimport Tesseract from \"tesseract.js\";\nimport styles from \"./styles.module.scss\";\n\n// https://www.smashingmagazine.com/2021/06/image-text-conversion-react-tesseract-js-ocr/\n// https://github.com/smashingmagazine/image-to-text\nfunction Reader() {\n  const [image, setImage] = useState(\"\");\n  const [text, setText] = useState(\"\");\n  // const [pin, setPin] = useState(\"\");\n  const canvasRef = useRef(null);\n  const imageRef = useRef(null);\n\n  const handleChange = (event) => {\n    setImage(URL.createObjectURL(event.target.files[0]));\n    // setImage(`${window.location.origin}/${event.target.files[0].name}`);\n    // const image = preprocessImage(canvasObj, event.target.files[0]);\n  };\n\n  const handleClick = () => {\n    const canvas = canvasRef.current;\n    canvas.width = imageRef.current.width;\n    canvas.height = imageRef.current.height;\n    const ctx = canvas.getContext(\"2d\");\n\n    ctx.drawImage(imageRef.current, 0, 0);\n    ctx.putImageData(preprocessImage(canvas), 0, 0);\n    const dataUrl = canvas.toDataURL(\"image/jpeg\");\n\n    Tesseract.recognize(dataUrl, \"eng\", {\n      logger: (m) => console.log(m),\n    })\n      .catch((err) => {\n        console.error(err);\n      })\n      .then((result) => {\n        console.log(result);\n\n        if (result) {\n          const { data } = result;\n          // Get Confidence score\n          let confidence = data.confidence;\n          // Get full output\n          let text = data.text;\n\n          setText(text);\n          // setPin(patterns);\n        }\n      });\n  };\n\n  return (\n    <div className=\"App\">\n      <main className=\"App-main\">\n        {image && (\n          <>\n            <h3>Actual image uploaded</h3>\n            <img src={image} className=\"App-logo\" alt=\"logo\" ref={imageRef} />\n            <h3>Canvas</h3>\n            <canvas ref={canvasRef} width={700} height={300}></canvas>\n            <h3>Extracted text</h3>\n            <div className=\"pin-box\">\n              <p> {text} </p>\n            </div>\n          </>\n        )}\n        <input type=\"file\" onChange={handleChange} />\n        <button onClick={handleClick} style={{ height: 50 }}>\n          Convert to text\n        </button>\n      </main>\n    </div>\n  );\n}\n\nexport default function Section() {\n  return (\n    <section className={styles.Section}>\n      <h2>Reader</h2>\n      <Reader />\n    </section>\n  );\n}\n","export default function preprocessImage(canvas) {\n  const ctx = canvas.getContext(\"2d\");\n  const image = ctx.getImageData(0, 0, canvas.width, canvas.height);\n  // blurARGB(image.data, canvas, 1);\n  // dilate(image.data, canvas);\n  invertColors(image.data);\n  thresholdFilter(image.data, 0.5);\n  return image;\n\n  // const ctx = canvas.getContext('2d')\n\n  // ctx.drawImage(image, 0, 0);\n  // const imgData = ctx.getImageData(0, 0, canvas.height, canvas.width);\n  // thresholdFilter(imgData.data, 0.7);\n  // ctx.putImageData(imgData,0,0)\n  // dataUrl = canvas.toDataURL('image/jpeg');\n  // return imgData;\n}\n\nfunction getARGB(data, i) {\n  const offset = i * 4;\n  return (\n    ((data[offset + 3] << 24) & 0xff000000) |\n    ((data[offset] << 16) & 0x00ff0000) |\n    ((data[offset + 1] << 8) & 0x0000ff00) |\n    (data[offset + 2] & 0x000000ff)\n  );\n}\n\nfunction setPixels(pixels, data) {\n  let offset = 0;\n  for (let i = 0, al = pixels.length; i < al; i++) {\n    offset = i * 4;\n    pixels[offset + 0] = (data[i] & 0x00ff0000) >>> 16;\n    pixels[offset + 1] = (data[i] & 0x0000ff00) >>> 8;\n    pixels[offset + 2] = data[i] & 0x000000ff;\n    pixels[offset + 3] = (data[i] & 0xff000000) >>> 24;\n  }\n}\n\n// internal kernel stuff for the gaussian blur filter\nlet blurRadius;\nlet blurKernelSize;\nlet blurKernel;\nlet blurMult;\n\n// from https://github.com/processing/p5.js/blob/main/src/image/filters.js\nfunction buildBlurKernel(r) {\n  let radius = (r * 3.5) | 0;\n  radius = radius < 1 ? 1 : radius < 248 ? radius : 248;\n\n  if (blurRadius !== radius) {\n    blurRadius = radius;\n    blurKernelSize = (1 + blurRadius) << 1;\n    blurKernel = new Int32Array(blurKernelSize);\n    blurMult = new Array(blurKernelSize);\n    for (let l = 0; l < blurKernelSize; l++) {\n      blurMult[l] = new Int32Array(256);\n    }\n\n    let bk, bki;\n    let bm, bmi;\n\n    for (let i = 1, radiusi = radius - 1; i < radius; i++) {\n      blurKernel[radius + i] = blurKernel[radiusi] = bki = radiusi * radiusi;\n      bm = blurMult[radius + i];\n      bmi = blurMult[radiusi--];\n      for (let j = 0; j < 256; j++) {\n        bm[j] = bmi[j] = bki * j;\n      }\n    }\n    bk = blurKernel[radius] = radius * radius;\n    bm = blurMult[radius];\n\n    for (let k = 0; k < 256; k++) {\n      bm[k] = bk * k;\n    }\n  }\n}\n\n// from https://github.com/processing/p5.js/blob/main/src/image/filters.js\nfunction blurARGB(pixels, canvas, radius) {\n  const width = canvas.width;\n  const height = canvas.height;\n  const numPackedPixels = width * height;\n  const argb = new Int32Array(numPackedPixels);\n  for (let j = 0; j < numPackedPixels; j++) {\n    argb[j] = getARGB(pixels, j);\n  }\n  let sum, cr, cg, cb, ca;\n  let read, ri, ym, ymi, bk0;\n  const a2 = new Int32Array(numPackedPixels);\n  const r2 = new Int32Array(numPackedPixels);\n  const g2 = new Int32Array(numPackedPixels);\n  const b2 = new Int32Array(numPackedPixels);\n  let yi = 0;\n  buildBlurKernel(radius);\n  let x, y, i;\n  let bm;\n  for (y = 0; y < height; y++) {\n    for (x = 0; x < width; x++) {\n      cb = cg = cr = ca = sum = 0;\n      read = x - blurRadius;\n      if (read < 0) {\n        bk0 = -read;\n        read = 0;\n      } else {\n        if (read >= width) {\n          break;\n        }\n        bk0 = 0;\n      }\n      for (i = bk0; i < blurKernelSize; i++) {\n        if (read >= width) {\n          break;\n        }\n        const c = argb[read + yi];\n        bm = blurMult[i];\n        ca += bm[(c & -16777216) >>> 24];\n        cr += bm[(c & 16711680) >> 16];\n        cg += bm[(c & 65280) >> 8];\n        cb += bm[c & 255];\n        sum += blurKernel[i];\n        read++;\n      }\n      ri = yi + x;\n      a2[ri] = ca / sum;\n      r2[ri] = cr / sum;\n      g2[ri] = cg / sum;\n      b2[ri] = cb / sum;\n    }\n    yi += width;\n  }\n  yi = 0;\n  ym = -blurRadius;\n  ymi = ym * width;\n  for (y = 0; y < height; y++) {\n    for (x = 0; x < width; x++) {\n      cb = cg = cr = ca = sum = 0;\n      if (ym < 0) {\n        bk0 = ri = -ym;\n        read = x;\n      } else {\n        if (ym >= height) {\n          break;\n        }\n        bk0 = 0;\n        ri = ym;\n        read = x + ymi;\n      }\n      for (i = bk0; i < blurKernelSize; i++) {\n        if (ri >= height) {\n          break;\n        }\n        bm = blurMult[i];\n        ca += bm[a2[read]];\n        cr += bm[r2[read]];\n        cg += bm[g2[read]];\n        cb += bm[b2[read]];\n        sum += blurKernel[i];\n        ri++;\n        read += width;\n      }\n      argb[x + yi] =\n        ((ca / sum) << 24) |\n        ((cr / sum) << 16) |\n        ((cg / sum) << 8) |\n        (cb / sum);\n    }\n    yi += width;\n    ymi += width;\n    ym++;\n  }\n  setPixels(pixels, argb);\n}\n\nfunction invertColors(pixels) {\n  for (var i = 0; i < pixels.length; i += 4) {\n    pixels[i] = pixels[i] ^ 255; // Invert Red\n    pixels[i + 1] = pixels[i + 1] ^ 255; // Invert Green\n    pixels[i + 2] = pixels[i + 2] ^ 255; // Invert Blue\n  }\n}\n// from https://github.com/processing/p5.js/blob/main/src/image/filters.js\nfunction dilate(pixels, canvas) {\n  let currIdx = 0;\n  const maxIdx = pixels.length ? pixels.length / 4 : 0;\n  const out = new Int32Array(maxIdx);\n  let currRowIdx, maxRowIdx, colOrig, colOut, currLum;\n\n  let idxRight, idxLeft, idxUp, idxDown;\n  let colRight, colLeft, colUp, colDown;\n  let lumRight, lumLeft, lumUp, lumDown;\n\n  while (currIdx < maxIdx) {\n    currRowIdx = currIdx;\n    maxRowIdx = currIdx + canvas.width;\n    while (currIdx < maxRowIdx) {\n      colOrig = colOut = getARGB(pixels, currIdx);\n      idxLeft = currIdx - 1;\n      idxRight = currIdx + 1;\n      idxUp = currIdx - canvas.width;\n      idxDown = currIdx + canvas.width;\n\n      if (idxLeft < currRowIdx) {\n        idxLeft = currIdx;\n      }\n      if (idxRight >= maxRowIdx) {\n        idxRight = currIdx;\n      }\n      if (idxUp < 0) {\n        idxUp = 0;\n      }\n      if (idxDown >= maxIdx) {\n        idxDown = currIdx;\n      }\n      colUp = getARGB(pixels, idxUp);\n      colLeft = getARGB(pixels, idxLeft);\n      colDown = getARGB(pixels, idxDown);\n      colRight = getARGB(pixels, idxRight);\n\n      //compute luminance\n      currLum =\n        77 * ((colOrig >> 16) & 0xff) +\n        151 * ((colOrig >> 8) & 0xff) +\n        28 * (colOrig & 0xff);\n      lumLeft =\n        77 * ((colLeft >> 16) & 0xff) +\n        151 * ((colLeft >> 8) & 0xff) +\n        28 * (colLeft & 0xff);\n      lumRight =\n        77 * ((colRight >> 16) & 0xff) +\n        151 * ((colRight >> 8) & 0xff) +\n        28 * (colRight & 0xff);\n      lumUp =\n        77 * ((colUp >> 16) & 0xff) +\n        151 * ((colUp >> 8) & 0xff) +\n        28 * (colUp & 0xff);\n      lumDown =\n        77 * ((colDown >> 16) & 0xff) +\n        151 * ((colDown >> 8) & 0xff) +\n        28 * (colDown & 0xff);\n\n      if (lumLeft > currLum) {\n        colOut = colLeft;\n        currLum = lumLeft;\n      }\n      if (lumRight > currLum) {\n        colOut = colRight;\n        currLum = lumRight;\n      }\n      if (lumUp > currLum) {\n        colOut = colUp;\n        currLum = lumUp;\n      }\n      if (lumDown > currLum) {\n        colOut = colDown;\n        currLum = lumDown;\n      }\n      out[currIdx++] = colOut;\n    }\n  }\n  setPixels(pixels, out);\n}\n\n// from https://github.com/processing/p5.js/blob/main/src/image/filters.js\nfunction thresholdFilter(pixels, level) {\n  if (level === undefined) {\n    level = 0.5;\n  }\n  const thresh = Math.floor(level * 255);\n  for (let i = 0; i < pixels.length; i += 4) {\n    const red = pixels[i];\n    const green = pixels[i + 1];\n    const blue = pixels[i + 2];\n    const gray = 0.2126 * red + 0.7152 * green + 0.0722 * blue;\n    let value;\n    if (gray >= thresh) {\n      value = 255;\n    } else {\n      value = 0;\n    }\n    pixels[i] = pixels[i + 1] = pixels[i + 2] = value;\n  }\n}\n","// Imports\nvar ___CSS_LOADER_API_SOURCEMAP_IMPORT___ = require(\"../../../../../node_modules/.pnpm/css-loader@7.1.2_webpack@5.95.0/node_modules/css-loader/dist/runtime/sourceMaps.js\");\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../../../../node_modules/.pnpm/css-loader@7.1.2_webpack@5.95.0/node_modules/css-loader/dist/runtime/api.js\");\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.IRvtrGxFn8zr6dQAIvJM{display:flex;flex-direction:column}.IRvtrGxFn8zr6dQAIvJM nav a{margin:1em}`, \"\",{\"version\":3,\"sources\":[\"webpack://./src/containers/Reader/styles.module.scss\"],\"names\":[],\"mappings\":\"AAAA,sBACE,YAAA,CACA,qBAAA,CAEE,4BACE,UAAA\",\"sourceRoot\":\"\"}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t\"Section\": `IRvtrGxFn8zr6dQAIvJM`\n};\nmodule.exports = ___CSS_LOADER_EXPORT___;\n"],"names":["options","styleTagTransform","setAttributes","insert","domAPI","insertStyleElement","undefined","Reader","image","setImage","useState","text","setText","canvasRef","useRef","imageRef","React","className","src","alt","ref","width","height","type","onChange","event","URL","createObjectURL","target","files","onClick","handleClick","canvas","current","ctx","getContext","drawImage","putImageData","getImageData","pixels","i","length","invertColors","data","level","thresh","Math","floor","value","thresholdFilter","preprocessImage","dataUrl","toDataURL","Tesseract","logger","m","console","log","catch","err","error","then","result","confidence","style","Section","styles","___CSS_LOADER_API_SOURCEMAP_IMPORT___","___CSS_LOADER_EXPORT___","___CSS_LOADER_API_IMPORT___","push","module","id","locals","exports"],"sourceRoot":""}